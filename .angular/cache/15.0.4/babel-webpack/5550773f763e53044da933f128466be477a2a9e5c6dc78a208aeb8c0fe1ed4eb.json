{"ast":null,"code":"import { FormBuilder, Validators } from '@angular/forms';\nimport { DiceService } from '../../services/dice.service';\nimport { DDService } from '../../services/dd.service';\nimport { NgxIndexedDBService } from 'ngx-indexed-db';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/dd.service\";\nimport * as i3 from \"../../services/dice.service\";\nimport * as i4 from \"ngx-indexed-db\";\nexport class CharacterSheetComponent {\n  constructor(formBuilder, dandDservice, diceService, indexedDB) {\n    this.formBuilder = formBuilder;\n    this.dandDservice = dandDservice;\n    this.diceService = diceService;\n    this.indexedDB = indexedDB;\n    this.abilityScoreIndex = 'str';\n  }\n  ngOnInit() {\n    this.bodyText = 'This text can be updated in modal 1';\n    this.characterSheetForm = this.formBuilder.group({\n      characterName: ['', Validators.compose([Validators.required])],\n      characterClass: ['', Validators.compose([Validators.required])],\n      characterSrength: '',\n      characterDexterity: '',\n      characterConstitution: '',\n      characterIntelligence: '',\n      characterWisdom: '',\n      characterCharisma: '',\n      characterHitPoints: '',\n      characterExperiencePoints: '',\n      characterGold: '',\n      characterArmorClass: '',\n      characterAlignment: '',\n      characterLevel: '',\n      characterSTPoison: '',\n      characterSTMagicWand: '',\n      characterSTParalysis: '',\n      characterSTDragonBreath: '',\n      characterSTSpells: '',\n      characterEquipment: '',\n      disabled: [false]\n    });\n    this.characterSheetForm.patchValue({\n      characterSrength: this.diceService.SixSidedThreeRolls()\n    });\n    this.characterSheetForm.patchValue({\n      characterDexterity: this.diceService.SixSidedThreeRolls()\n    });\n    this.characterSheetForm.patchValue({\n      characterConstitution: this.diceService.SixSidedThreeRolls()\n    });\n    this.characterSheetForm.patchValue({\n      characterIntelligence: this.diceService.SixSidedThreeRolls()\n    });\n    this.characterSheetForm.patchValue({\n      characterWisdom: this.diceService.SixSidedThreeRolls()\n    });\n    this.characterSheetForm.patchValue({\n      characterCharisma: this.diceService.SixSidedThreeRolls()\n    });\n  }\n  // tslint:disable-next-line:use-life-cycle-interface\n  ngAfterContentInit() {\n    this.getAbilityScores(this.abilityScoreIndex);\n  }\n  getAbilityScores(index) {\n    this.dandDservice.getAbilityScore(this.abilityScoreIndex).subscribe(res => {\n      this.abilityScoreData = res;\n      // console.log('data', this.abilityScoreData$);\n    }, error => {\n      console.log(error);\n    });\n  }\n  addCharacter() {\n    let newCharacter;\n    newCharacter = {\n      characterName: this.characterSheetForm.get('characterName').value,\n      characterClass: this.characterSheetForm.get('characterClass').value,\n      characterSrength: this.characterSheetForm.get('characterSrength').value,\n      characterDexterity: this.characterSheetForm.get('characterDexterity').value,\n      characterConstitution: this.characterSheetForm.get('characterConstitution').value,\n      characterIntelligence: this.characterSheetForm.get('characterIntelligence').value,\n      characterWisdom: this.characterSheetForm.get('characterWisdom').value,\n      characterCharisma: this.characterSheetForm.get('characterCharisma').value,\n      characterHitPoints: this.characterSheetForm.get('characterHitPoints').value,\n      characterExperiencePoints: this.characterSheetForm.get('characterExperiencePoints').value,\n      characterGold: this.characterSheetForm.get('characterHitGold').value,\n      characterArmorClass: this.characterSheetForm.get('characterArmorClass').value,\n      characterAlignment: this.characterSheetForm.get('characterAlignment').value,\n      characterLevel: this.characterSheetForm.get('characterLevel').value,\n      characterSTPoison: this.characterSheetForm.get('characterSTPoison').value,\n      characterSTMagicWand: this.characterSheetForm.get('characterSTMagicWand').value,\n      characterSTParalysis: this.characterSheetForm.get('characterSTParalysis').value,\n      characterSTDragonBreath: this.characterSheetForm.get('characterSTDragonBreath').value,\n      characterSTSpells: this.characterSheetForm.get('characterSTSpells').value,\n      characterEquipment: this.characterSheetForm.get('characterEquipment').value\n    };\n    this.dandDservice.getCharacterClass(newCharacter.characterClass).subscribe(res => {\n      this.characterClass = res;\n      console.log('data', this.characterClass);\n    }, error => {\n      console.log(error);\n    });\n  }\n  experienceLevelUp() {\n    const level = this.characterSheetForm.get('characterClass').value;\n    if (level === undefined || level === null || level === '') {\n      window.alert('please select a character class');\n    }\n    if (level === 'Magic-user') {\n      const newPoints = this.diceService.sixSidedDieFunc();\n      console.log(newPoints);\n    }\n    if (level === 'Cleric' || level === 'Thief' || level === 'Elf') {\n      const newPoints = this.diceService.eightSidedDieFunc();\n      console.log(newPoints);\n    }\n    if (level === 'Halfling') {\n      const newPoints = this.diceService.eightSidedDieFunc() + 1;\n      console.log(newPoints);\n    }\n    if (level === 'Dwarf') {\n      const newPoints = this.diceService.eightSidedDieFunc() + 2;\n      console.log(newPoints);\n    }\n    if (level === 'Fighter') {\n      const newPoints = this.diceService.tenSidedDieFunc();\n      console.log(newPoints);\n    }\n  }\n  testDice() {\n    console.log('eight', this.diceService.eightSidedDieFunc());\n  }\n  addCharacterToDb() {}\n}\nCharacterSheetComponent.ɵfac = function CharacterSheetComponent_Factory(t) {\n  return new (t || CharacterSheetComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.DDService), i0.ɵɵdirectiveInject(i3.DiceService), i0.ɵɵdirectiveInject(i4.NgxIndexedDBService));\n};\nCharacterSheetComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CharacterSheetComponent,\n  selectors: [[\"app-character-sheet\"]],\n  decls: 1,\n  vars: 0,\n  consts: [[1, \"character-sheet\"]],\n  template: function CharacterSheetComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n  },\n  styles: [\".character-sheet[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{width:100%}.character-sheet__form-container[_ngcontent-%COMP%]{display:flex;flex-direction:column}.character-sheet__form-section[_ngcontent-%COMP%]{margin:1em 0}\"]\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}